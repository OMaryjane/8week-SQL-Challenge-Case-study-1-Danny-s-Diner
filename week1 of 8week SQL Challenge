
--I started by creating the database, I used the 'right click' method but later decided to delete and write a query for it instead
CREATE database dannys_diner;

--I then proceeded to create the tables to work with;'sales', 'menu' and 'members' and viewing them after
CREATE table sales (
	customer_id VARCHAR(1),
	order_date DATE,
	product_id INTEGER
);
--Inseting values into the created table
INSERT INTO sales
VALUES
	('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
  
SELECT * FROM sales;

CREATE table menu (
	product_id INTEGER,
	product_name VARCHAR(5),
	price INTEGER
	);
INSERT INTO menu
VALUES
	('1', 'sushi', '10'),
	('2', 'curry', '15'),
	('3', 'ramen', '12');
SELECT * FROM menu;

CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);
INSERT INTO members
VALUES
	('A', '2021-01-07'),
	('B', '2021-01-09');
SELECT * FROM members;

--CASE STUDY QUESTIONS
--1)What is the total amount each customer spent at the restaurant
SELECT * FROM sales;
SELECT customer_id,
	SUM(price)
FROM sales
INNER JOIN menu
USING(product_id)
GROUP BY customer_id
ORDER BY customer_id;

--2)How many days has each customer visited the restaurant?
SELECT customer_id,
	COUNT(order_date) AS Num_of_visit
FROM sales
GROUP BY customer_id
ORDER BY customer_id;

--3)What was the first item from the menu purchased by each customer?
WITH sales_order AS (
SELECT sales.customer_id,
	product_name,
	order_date,
	DENSE_RANK()
	OVER(PARTITION BY sales.customer_id ORDER BY sales.order_date)
FROM sales
INNER JOIN menu
ON sales.product_id = menu.product_id)
SELECT DISTINCT *
FROM sales_order
WHERE dense_rank = 1;

--4)What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT
	product_name,
	COUNT(product_id) AS most_purchased
FROM sales
INNER JOIN menu
USING(product_id)
GROUP BY product_name
ORDER BY most_purchased DESC;

--5)Which item was the most popular for each customer?
SELECT DISTINCT(customer_id),
	product_name,
	COUNT(product_id) AS popular_item
FROM sales
INNER JOIN menu
USING(product_id)
GROUP BY customer_id, product_name
HAVING COUNT(product_id) > 1
ORDER BY customer_id;

--6)Which item was purchased first by the customer after they became a member?
WITH purchase_order AS (
SELECT sales.customer_id,
	product_name,
	order_date,
	join_date,
	DENSE_RANK()
	OVER(PARTITION BY sales.customer_id ORDER BY order_date)
FROM menu
INNER JOIN sales
ON menu.product_id = sales.product_id
INNER JOIN members
ON sales.customer_id = members.customer_id
WHERE order_date >= join_date )
SELECT customer_id,
	product_name
FROM purchase_order
WHERE dense_rank = 1;

--7)Which item was purchased just before the customer became a member?
WITH purchase_before_membership AS (
SELECT sales.customer_id,
	order_date,
	join_date,
	product_name,
	DENSE_RANK()
	OVER(PARTITION BY sales.customer_id ORDER BY order_date)
FROM members
JOIN sales
ON sales.customer_id = members.customer_id
JOIN menu
ON menu.product_id = sales.product_id
WHERE order_date < join_date)
SELECT customer_id,
	product_name
FROM purchase_before_membership
WHERE dense_rank = 1;

--8)What is the total items and amount spent for each member before they became a member?
SELECT sales.customer_id,
COUNT(menu.product_id) AS total_items,
	SUM(price) AS total_amount
FROM menu
INNER JOIN sales
ON menu.product_id = sales.product_id
INNER JOIN members
ON sales.customer_id = members.customer_id
WHERE order_date < join_date
GROUP BY sales.customer_id
ORDER BY sales.customer_id;

--9)If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT customer_id,
	SUM(price) AS total_price,
	SUM(CASE WHEN product_name = 'curry' OR product_name = 'ramen'
	THEN (10 * price)
	ELSE (20 * price) END) AS points
FROM sales
INNER JOIN menu
USING(product_id)
GROUP BY customer_id
ORDER BY points DESC;

--10)In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
WITH first_p AS (
	SELECT *,
	(join_date + INTERVAL '6 days') AS start_date,
	'2021-01-31' as last_day
	FROM sales
	INNER JOIN members
	USING(customer_id))
SELECT customer_id,
	SUM(CASE WHEN order_date BETWEEN join_date AND start_date THEN (20 * price)
		WHEN order_date NOT BETWEEN join_date AND start_date AND product_name = 'sushi' THEN (20 * price)
	ELSE (10 * price) END) AS points
FROM first_p
INNER JOIN menu
USING(product_id)
WHERE order_date <= TO_DATE(last_day, 'YYYY-MM-DD')
GROUP BY customer_id
ORDER BY points DESC;
	
--BONUS QUESTIONS
--1
SELECT customer_id,
order_date,
product_name,
price,
CASE WHEN join_date > order_date THEN 'N'
	WHEN order_date >= join_date THEN 'Y'
	ELSE 'N' END AS member
FROM sales
LEFT JOIN members
USING(customer_id)
LEFT JOIN menu
USING(product_id)
ORDER BY customer_id, order_date;

--2
WITH mem AS (
SELECT customer_id,
order_date,
product_name,
price,
	CASE WHEN join_date > order_date THEN 'N'
	WHEN order_date >= join_date THEN 'Y'
	ELSE 'N' END AS member
FROM sales
LEFT JOIN members
USING(customer_id)
LEFT JOIN menu
USING(product_id)
)
SELECT *,
CASE WHEN member = 'N' THEN NULL
ELSE
	DENSE_RANK()
	OVER(PARTITION BY customer_id, member
		ORDER BY order_date) END AS Ranking
FROM mem
ORDER BY customer_id, order_date;
